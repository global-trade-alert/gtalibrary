// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gta_code_converter_cpp
List gta_code_converter_cpp(const std::vector<std::string>& codes_2012, const std::vector<std::string>& codes_vintage, const std::vector<std::string>& codes);
RcppExport SEXP _gtalibrary_gta_code_converter_cpp(SEXP codes_2012SEXP, SEXP codes_vintageSEXP, SEXP codesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type codes_2012(codes_2012SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type codes_vintage(codes_vintageSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type codes(codesSEXP);
    rcpp_result_gen = Rcpp::wrap(gta_code_converter_cpp(codes_2012, codes_vintage, codes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gtalibrary_gta_code_converter_cpp", (DL_FUNC) &_gtalibrary_gta_code_converter_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gtalibrary(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
